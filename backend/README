# Polling App

NA

## Getting Started

NA

### Start Backend
fuser -k 4000/tcp; npm start

## About LDAP 

We can access LDAP information with CURl as 
```
curl -v  "ldap://host:389/uid=<anyuser>,ou=Users,dc=ldap,dc=<xx>,dc=<yy>,dc=<zz>"
   --noproxy "*" --user "uid=<User>,ou=Users,dc=ldap,dc=<xx>,dc=<yy>,dc=<zz>":<Password>
```

Here we use ldapjs to connect with Server such as :

```
var ldap = require('ldapjs');
var client = ldap.createClient({
  url: 'ldap://ldap.tsdv.com.vn:389'
});

// Bind if We need Authentication
client.bind('uid=<User>,ou=Users,dc=ldap,dc=<xx>,dc=<yy>,dc=<zz>',
  <Password>, function(err) {
    // When bind Finished
});

// Search a data 
var opts = {
  //filter: '(|(telephoneNumber=<AnyPhoneHere>)(homePhone=<LLL>)(mobile=<HHH>))',
  attributes: ['uidNumber', 'uid', 'mail', 'cn']
};
client.search('uid=<AnyUser>,ou=Users,dc=ldap,dc=<xx>,dc=<yy>,dc=<zz>', 
opts, function(err, res) {
  res.on('searchEntry', function(entry) {
    var userInfo = entry.object;
    // Logined OK
    resolve(logUser)
  });
  res.on('error', function(err) {
    console.error('    LDAP Search error: ' + err.message);
  });
  res.on('end', function(result) {
    console.log('    Search Result status: ' + result.status);
  });
});
```

## Frontend Request into this Backend

### Polling

* Create new Poll with "Question", "User" who created it, and "Choices" of Text...
* Other User can Create new Choice easily
* User can make new Vote or change Vote easily. App need know now current User voted What
** With current User, can easily Link to selected Choice of a Poll
* User can view Which User in this Choices 

## About MongoDB Design 

Consider between Embedded or Reference.

* Because need to Link easily User with voted Choice 
=>> User Voted need Embedded inside Choice for easy Query

* Number of Choices in each Poll is not too Large
* Number of Polls can increase too Much, so there maybe many Choices-Poll relations.
* And Frontend no need Manipulate much about Choice, no need separated Collections for Choice 
==> can Embedded Choice in Poll


```
const PollSchema = new Schema({
  _id: ID!,
  question: {
    type: String,
    required: true
  },
  createdDate: Date,
  duration: int,   <<<---- Time in minutes
  choices: [
    {
      _id: ID!
      text: String,
      votes: [
        {
          _id: ID!,
          username: String // Who Voted this Choice,
          voteDate: Date;
        }
      ]
    }
  ]
});
```

## Example of GraphQL

```
mutation CreateUser {
  createUser (
    	user: {username:"test1", password:"test1"}) {
    _id
    username
    password
  }
}
mutation CreatPoll {
  createPoll (poll: {question:"GO Party ?"}) {
    _id
		question
  }
}
mutation CreatFullPoll {
  createFullPoll (pollWithChoices: 
    {question:"Go Home", choices:[
      {
        text:"No, Stay Here"
      },
      {
        text:"Go by Bus"
      }
      ]}) {
    _id
		question
    choices {
      _id
      text
    }
  }
}
mutation CreatChoice {
  createChoice (
    	choice: {text:"Bia Thu Hang", 
        poll:"5d432e76f5622c188f01f8af"}) {
    _id
    question
    choices {
      _id
      text
    }
  }
}
mutation CreatVote {
  createVote (
    	vote: {username:"thangdd", 
        poll:"5d432e76f5622c188f01f8af",
      	choice:"5d433574e7b709206b36d049"}) {
    _id
    question
    choices {
      _id
      text
      votes {
        username
      }
    }
  }
}
{
  polls {
    _id
    question
    choices {
      _id
      text
      votes {
        username
      }
    }
  }
}
```

## Dynamo DB 

var AWS= require('aws-sdk'),
dyn= new AWS.DynamoDB({ endpoint: new AWS.Endpoint('http://localhost:8000') });


var params = {
    ExclusiveStartTableName: 'table_name', // optional (for pagination, returned as LastEvaluatedTableName)
    Limit: 10, // optional (to further limit the number of table names returned per page)
};
dynamodb.listTables(params, function(err, data) {
    if (err) ppJson(err); // an error occurred
    else ppJson(data); // successful response
});





var params = {
    TableName: 'users',
    KeySchema: [ // The type of of schema.  Must start with a HASH type, with an optional second RANGE.
        { // Required HASH type attribute
            AttributeName: 'username',
            KeyType: 'HASH'
        }
    ],
    AttributeDefinitions: [ // The names and types of all primary and index key attributes only
        {
            AttributeName: 'username',
            AttributeType: 'S', // (S | N | B) for string, number, binary
        }
        
        // ... more attributes ...
    ],
    ProvisionedThroughput: { // required provisioned throughput for the table
        ReadCapacityUnits: 1, 
        WriteCapacityUnits: 1, 
    }
};
dynamodb.createTable(params, function(err, data) {
    if (err) ppJson(err); // an error occurred
    else ppJson(data); // successful response
});


// Delete Table 
var params = {
    TableName: 'users',
};
dynamodb.deleteTable(params, function(err, data) {
    if (err) ppJson(err); // an error occurred
    else ppJson(data); // successful response
});



// For Put Value 
var params = {
    TableName: 'users',
    Item: { // a map of attribute name to AttributeValue
        "id": "andom1",
        "username": "test1",
        "password": "test1",
        
        }
};
docClient.put(params, function(err, data) {
    if (err) ppJson(err); // an error occurred
    else ppJson(data); // successful response
});



// Get value 
var params = {
    TableName: 'users',
    Key: { // a map of attribute name to AttributeValue for all primary key attributes
        "username": "test1",
    },
    AttributesToGet: [ // optional (list of specific attribute names to return)
        'attribute_name',
        // ... more attribute names ...
    ],
};
docClient.get(params, function(err, data) {
    if (err) ppJson(err); // an error occurred
    else ppJson(data); // successful response
});


// Get All
var params = {
    TableName: 'users',
    
};
dynamodb.scan(params, function(err, data) {
    if (err) ppJson(err); // an error occurred
    else ppJson(data); // successful response
});



// Another code 
export const scanTable = async (tableName) => {
    const params = {
        TableName: tableName,
    };

    let scanResults = [];
    let items;
    do{
        items =  await documentClient.scan(params).promise();
        items.Items.forEach((item) => scanResults.push(item));
        params.ExclusiveStartKey  = items.LastEvaluatedKey;
    }while(typeof items.LastEvaluatedKey != "undefined");

    return scanResults;

};